
resultados en resultados/prof

node --prof appProcess.js 

Sin "Console Log"

    node --prof-process result-ConsoleLog.log > result-prof-ConsoleLog.txt

 [Summary]:
   ticks  total  nonlib   name
      2    0.1%  100.0%  JavaScript
      0    0.0%    0.0%  C++
      1    0.0%   50.0%  GC
   3175   99.9%          Shared libraries


Con "Console Log"

    node --prof-process result-SinConsoleLog.log > result-prof-SinConsoleLog.txt

 [Summary]:
   ticks  total  nonlib   name
      0    0.0%    NaN%  JavaScript
      0    0.0%    NaN%  C++
      3    0.1%  Infinity%  GC
   2807  100.0%          Shared libraries

Sin "Console Log"

    artillery quick --count 20 -n 50 "http://localhost:8080/api/infoSinLog" > result-SinConsoleLog.txt
        
http.codes.200: ................................................................ 1000
http.request_rate: ............................................................. 994/sec
http.requests: ................................................................. 1000
http.response_time:
  min: ......................................................................... 0
  max: ......................................................................... 21
  median: ...................................................................... 1
  p95: ......................................................................... 4
  p99: ......................................................................... 6
http.responses: ................................................................ 1000
vusers.completed: .............................................................. 20
vusers.created: ................................................................ 20
vusers.created_by_name.0: ...................................................... 20
vusers.failed: ................................................................. 0
vusers.session_length:
  min: ......................................................................... 68.4
  max: ......................................................................... 214.3
  median: ...................................................................... 125.2
  p95: ......................................................................... 179.5
  p99: ......................................................................... 179.5

Con "Console Log"

    artillery quick --count 20 -n 50 "http://localhost:8080/api/infoConLog" > result-ConsoleLog.txt
        
http.codes.200: ................................................................ 1000
http.request_rate: ............................................................. 592/sec
http.requests: ................................................................. 1000
http.response_time:
  min: ......................................................................... 1
  max: ......................................................................... 52
  median: ...................................................................... 13.1
  p95: ......................................................................... 34.8
  p99: ......................................................................... 48.9
http.responses: ................................................................ 1000
vusers.completed: .............................................................. 20
vusers.created: ................................................................ 20
vusers.created_by_name.0: ...................................................... 20
vusers.failed: ................................................................. 0
vusers.session_length:
  min: ......................................................................... 430.5
  max: ......................................................................... 988.4
  median: ...................................................................... 925.4
  p95: ......................................................................... 982.6
  p99: ......................................................................... 982.6


Como se puede ver en el resumen de los resultados, fueron muchas mas las peticiones atendidas cuando no se tenia incluido 
el "console log" Vs si se tenia, esto se puede comprovar principalmente en la tasa media de solicitudes atendidas por tiempo de 
994/sec (sin) Vs 592/sec (con). ademas tambien se puede confirmar en la media de tiempo de atencion por solicitud de 125.2 (sin) 
vs 925 (con).  
En cuento a los ticks, no hay diferencia significativa entre los 2 procesos.

   
autocannon en archivo benchmark.js

Ejacucion:
    0x appProcess.js
    npm test

Sin "Console Log"

Running 20s test @ http://localhost:8080/api/infoSinLog
100 connections


┌─────────┬──────┬───────┬───────┬───────┬──────────┬─────────┬────────┐
│ Stat    │ 2.5% │ 50%   │ 97.5% │ 99%   │ Avg      │ Stdev   │ Max    │
├─────────┼──────┼───────┼───────┼───────┼──────────┼─────────┼────────┤
│ Latency │ 8 ms │ 19 ms │ 41 ms │ 49 ms │ 21.42 ms │ 8.83 ms │ 243 ms │
└─────────┴──────┴───────┴───────┴───────┴──────────┴─────────┴────────┘
┌───────────┬─────────┬─────────┬───────┬─────────┬─────────┬─────────┬─────────┐
│ Stat      │ 1%      │ 2.5%    │ 50%   │ 97.5%   │ Avg     │ Stdev   │ Min     │
├───────────┼─────────┼─────────┼───────┼─────────┼─────────┼─────────┼─────────┤
│ Req/Sec   │ 2111    │ 2111    │ 4963  │ 5439    │ 4565.61 │ 914.5   │ 2111    │
├───────────┼─────────┼─────────┼───────┼─────────┼─────────┼─────────┼─────────┤
│ Bytes/Sec │ 28.9 MB │ 28.9 MB │ 68 MB │ 74.4 MB │ 62.5 MB │ 12.5 MB │ 28.9 MB │
└───────────┴─────────┴─────────┴───────┴─────────┴─────────┴─────────┴─────────┘

Req/Bytes counts sampled once per second.
# of samples: 20

91k requests in 20.08s, 1.25 GB read


Con "Console Log"

Running 20s test @ http://localhost:8080/api/infoConLog
100 connections


┌─────────┬───────┬───────┬────────┬────────┬──────────┬─────────┬────────┐
│ Stat    │ 2.5%  │ 50%   │ 97.5%  │ 99%    │ Avg      │ Stdev   │ Max    │
├─────────┼───────┼───────┼────────┼────────┼──────────┼─────────┼────────┤
│ Latency │ 16 ms │ 50 ms │ 133 ms │ 168 ms │ 58.33 ms │ 31.3 ms │ 472 ms │
└─────────┴───────┴───────┴────────┴────────┴──────────┴─────────┴────────┘
┌───────────┬─────────┬─────────┬─────────┬─────────┬─────────┬─────────┬─────────┐
│ Stat      │ 1%      │ 2.5%    │ 50%     │ 97.5%   │ Avg     │ Stdev   │ Min     │
├───────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│ Req/Sec   │ 717     │ 717     │ 1861    │ 2371    │ 1698.95 │ 511.85  │ 717     │
├───────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│ Bytes/Sec │ 9.82 MB │ 9.82 MB │ 25.5 MB │ 32.5 MB │ 23.3 MB │ 7.01 MB │ 9.81 MB │
└───────────┴─────────┴─────────┴─────────┴─────────┴─────────┴─────────┴─────────┘

Req/Bytes counts sampled once per second.
# of samples: 20

34k requests in 20.09s, 465 MB read


Al igual que el analisis anterior del profiler de node, al realizar la prueba con autocannon se puede ver un rendimiento 
en numero de requerimientos antendidos de mas del doble "sin console log" vs "con console log" y una cantidad de informacion
procesada igualmente mucho mayor respectivamente. 